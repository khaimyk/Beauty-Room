const cron = require("node-cron");
const { prisma } = require("../prisma/prisma-client");
const { sendClientNotification } = require("./TelegramBot/clientNotification");

class ReminderManager {
  constructor() {
    if (!prisma) throw new Error("Prisma client –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π");
    if (!sendClientNotification)
      throw new Error("sendClientNotification –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π");
    this.jobs = new Map();
    this.init().catch((err) =>
      console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ReminderManager:", err)
    );
  }

  async init() {
    await this.loadActiveBookings();
    cron.schedule("0 * * * *", () => this.loadActiveBookings());
  }

  async loadActiveBookings() {
    try {
      const now = new Date();
      const bookings = await prisma.booking.findMany({
        where: {
          status: "CONFIRMED",
          date: { gt: now },
        },
        include: {
          client: true,
          services: true,
          user: true,
          branch: true,
        },
      });

      this.syncJobs(bookings);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å:", error);
    }
  }

  // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å
  async setupDefaultReminders(booking) {
    const defaultReminderHours = [6, 12, 24]; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    const jobs = [];

    for (const hours of defaultReminderHours) {
      const reminderDate = new Date(booking.date);
      reminderDate.setHours(reminderDate.getHours() - hours);

      if (reminderDate > new Date()) {
        const job = await this.createReminderJob(booking, hours, reminderDate);
        jobs.push(job);
      }
    }

    if (jobs.length > 0) {
      this.jobs.set(booking.id, jobs);
    }
  }

  // –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–∑ UI)
  async setupSingleReminder(booking, hoursBefore, client) {
    await this.cancelReminder(booking.id);

    const timeMatch = booking.notes?.match(/(\d{1,2}):(\d{2})/);
    if (!timeMatch) {
      throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å –∑–∞–ø–∏—Å—É");
    }

    const [_, hoursStr, minutesStr] = timeMatch;
    const hours = parseInt(hoursStr, 10);
    const minutes = parseInt(minutesStr, 10);

    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–∞—Ç–∏ –∑–∞–ø–∏—Å—É
    const bookingDate = new Date(booking.date);

    // 3. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Å –∑–∞–ø–∏—Å—É
    bookingDate.setHours(hours, minutes, 0, 0);

    // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –∑–∞–ø–∏—Å—É –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
    if (bookingDate <= new Date()) {
      throw new Error("–î–∞—Ç–∞ –∑–∞–ø–∏—Å—É –≤–∂–µ –º–∏–Ω—É–ª–∞");
    }

    // 5. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    const reminderDate = new Date(bookingDate);
    reminderDate.setHours(reminderDate.getHours() - hoursBefore);

    if (reminderDate <= new Date()) {
      throw new Error(
        `–î–æ –∑–∞–ø–∏—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–µ–Ω—à–µ ${hoursBefore} –≥–æ–¥–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ–Ω—à–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É.`
      );
    }

    console.log(
      `‚è∞ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ ${reminderDate} (–∑–∞ ${hoursBefore} –≥–æ–¥–∏–Ω –¥–æ –∑–∞–ø–∏—Å—É)`
    );

    const job = await this.createReminderJob(
      booking,
      hoursBefore,
      reminderDate,
      client
    );
    this.jobs.set(booking.id, [job]);
  }

  // –ó–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
  async createReminderJob(booking, hoursBefore, reminderDate, client = null) {
    return cron.schedule(
      this.getCronTime(reminderDate),
      async () => {
        try {
          const targetClient = client || booking.client;
          const services = booking.services.map((s) => s.name).join(", ");
          const message = `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å!\n\n–ß–µ—Ä–µ–∑ ${hoursBefore} –≥–æ–¥–∏–Ω —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ:\n üè¢ –°–∞–ª–æ–Ω: ${
            booking.branch?.name
          }\n üë§ –ú–∞–π—Å—Ç–µ—Ä: ${
            booking.user?.name
          }\nüõ†Ô∏è –ü–æ—Å–ª—É–≥–∞: ${services}\nüìÖ –î–∞—Ç–∞: ${
            booking.date.toISOString().split("T")[0]
          }\nüïí –ß–∞—Å: ${booking.notes || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}\n ‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${
            booking.time
          } —Ö–≤–∏–ª–∏–Ω`;

          await sendClientNotification(targetClient, message);
        } catch (error) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", error);
        }
      },
      { scheduled: true, timezone: "Europe/Warsaw" }
    );
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ syncJobs
  syncJobs(bookings) {
    this.jobs.forEach((job, bookingId) => {
      if (!bookings.some((b) => b.id === bookingId)) {
        this.cancelReminder(bookingId);
      }
    });

    bookings.forEach((booking) => {
      if (!this.jobs.has(booking.id)) {
        this.setupDefaultReminders(booking); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥
      }
    });
  }

  getCronTime(date) {
    return `${date.getMinutes()} ${date.getHours()} ${date.getDate()} ${
      date.getMonth() + 1
    } *`;
  }

  async cancelReminder(bookingId) {
    if (this.jobs.has(bookingId)) {
      this.jobs.get(bookingId).forEach((job) => {
        job.stop();
        console.log("–ó–∞–≤–¥–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ");
      });
      this.jobs.delete(bookingId);
    } else {
      console.log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è");
    }
  }
}

module.exports = ReminderManager;
