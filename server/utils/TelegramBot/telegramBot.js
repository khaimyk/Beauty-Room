const bot = require("./botInstanse.js");
const { prisma } = require("../../prisma/prisma-client.js");
const {
  updateUserChatId,
  updateClientChatId,
  notifyAdmins,
} = require("./userServise.js");

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id.toString();
  const username = msg.from.username ? `@${msg.from.username}` : null;

  // –ù–∞–¥—ñ—à–ª–∏ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞, —è–∫—â–æ –Ω–µ–º–∞—î username
  if (!username) {
    return bot.sendMessage(chatId, "üì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", {
      reply_markup: {
        keyboard: [[{ text: "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact: true }]],
        one_time_keyboard: true,
        resize_keyboard: true,
      },
    });
  }

  await handleUserInit(chatId, username);
});
bot.onText(/\/clients|üë• –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤/, async (msg) => {
  const chatId = msg.chat.id.toString();

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const user = await prisma.user.findFirst({
      where: { chatId },
      select: { role: true, branchId: true },
    });
    if (!user || user.role !== "ADMIN") {
      return bot.sendMessage(chatId, "üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.");
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    const page = 0; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const clients = await prisma.client.findMany({
      where: {
        bookings: {
          some: {
            branch: {
              id: user.branchId,
            },
          },
        },
        NOT: { nickName: "" },
      },
      select: {
        name: true,
        phoneNumber: true,
        nickName: true,
        createdAt: true,
      },
      orderBy: { createdAt: "desc" },
      skip: page * 10,
      take: 10,
    });

    if (clients.length === 0) {
      return bot.sendMessage(chatId, "‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.");
    }

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    const text = clients
      .map(
        (c, i) =>
          `${i + 1}. üë§ ${c.name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ"}\n` +
          `üì± ${c.phoneNumber || "-"}\n` +
          `üîñ ${c.nickName || "-"}\n` +
          `üïí ${c.createdAt.toLocaleString("uk-UA")}`
      )
      .join("\n\n");

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏

    const nextButton = [
      {
        text: "‚¨áÔ∏è –ù–∞—Å—Ç—É–ø–Ω—ñ",
        callback_data: `next_clients_${page + 1}`,
      },
    ];

    await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n${text}`, {
      reply_markup: {
        inline_keyboard: [nextButton],
      },
    });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤:", err);
    bot.sendMessage(
      chatId,
      "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤."
    );
  }
});

bot.on("contact", async (msg) => {
  const chatId = msg.chat.id.toString();
  const phoneNumber = msg.contact.phone_number;

  if (!phoneNumber) {
    return bot.sendMessage(chatId, "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.");
  }

  await handleUserInit(chatId, null, phoneNumber);
});

async function handleUserInit(chatId, username, phoneNumber = null) {
  try {
    let user = await prisma.user.findFirst({
      where: {
        OR: [
          { chatId },
          username ? { nickName: username } : undefined,
          phoneNumber ? { nickName: phoneNumber } : undefined,
        ].filter(Boolean),
      },
    });

    if (user && (username || phoneNumber)) {
      await updateUserChatId(user.id, chatId, username || phoneNumber);
    }

    let roleMessage = "üë§ –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.";
    let isClient = false;

    let client = null;
    if (!user || user.role === "CLIENT") {
      client = await prisma.client.findFirst({
        where: {
          OR: [
            username ? { nickName: username } : undefined,
            { chatId: chatId },
            phoneNumber ? { nickName: phoneNumber } : undefined,
          ].filter(Boolean),
        },
      });
    }

    if (client) {
      const sameNick =
        client.nickName === chatId || client.nickName === phoneNumber;
      if (!sameNick) {
        const updated = await updateClientChatId(
          client.id,
          chatId,
          username || phoneNumber
        );
        if (updated) {
          isClient = true;
          roleMessage =
            "üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç! –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏.";
        } else {
          roleMessage =
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤–∞—à nickName. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
        }
      } else {
        isClient = true;
        roleMessage = "‚úÖ –í–∏ –∫–ª—ñ—î–Ω—Ç. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤.";
      }
    } else if (user) {
      switch (user.role) {
        case "CLIENT":
          roleMessage = "‚úÖ –í–∏ –∫–ª—ñ—î–Ω—Ç. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤.";
          break;
        case "ADMIN":
          roleMessage = "üõ†Ô∏è –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.";
          await bot.sendMessage(chatId, "üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
            reply_markup: {
              keyboard: [[{ text: "üë• –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤" }]],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          });
          break;
        case "MASTER":
          roleMessage =
            "üìÖ –í–∏ –º–∞–π—Å—Ç–µ—Ä —ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.";
          break;
      }
    } else {
      roleMessage =
        "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
    }
    await bot.sendMessage(chatId, roleMessage);
    if (isClient) {
      await notifyAdmins(
        bot,
        `üîî –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${username || phoneNumber || chatId}`
      );
    }
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É –∫–æ–º–∞–Ω–¥—ñ /start:", err);
    bot.sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ chatId.");
  }
}

module.exports = bot;
