const bot = require("./telegramBot");
const { prisma } = require("../../prisma/prisma-client");

const getUpdatedText = (booking, status = "CONFIRMED") => {
  return `${
    status === "CONFIRMED"
      ? "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"
      : "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"
  }:
üë§ –ö–ª—ñ—î–Ω—Ç: ${booking.client?.name || "–ù–µ–≤—ñ–¥–æ–º–æ"} 
üõ†Ô∏è –ü–æ—Å–ª—É–≥–∞: ${booking.services.map((s) => s.name).join(", ")}
üìÖ –î–∞—Ç–∞: ${booking.date.toISOString().split("T")[0]}
üïí –ß–∞—Å: ${booking.notes || "–Ω–µ–º–∞—î"}
‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${booking.time} —Ö–≤–∏–ª–∏–Ω`;
};

const updateBookingMessages = async (booking, status) => {
  const full = await prisma.booking.findUnique({
    where: { id: booking.id },
    include: {
      services: true,
      client: true,
      user: true,
    },
  });

  const messages = await prisma.bookingMessage.findMany({
    where: { bookingId: booking.id },
  });

  const text = getUpdatedText(full, status);

  for (const msg of messages) {
    try {
      await bot.editMessageText(text, {
        chat_id: msg.chatId,
        message_id: msg.messageId,
      });
    } catch (err) {
      console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:`, err);
    }
  }
};

module.exports = { updateBookingMessages };
