const bot = require("./telegramBot");
const { sendEmail, scheduleEmailReminder } = require("../sendEmail");
const { getClientChatIds } = require("./userServise");

async function sendClientNotification(
  client,
  message,
  messageHTML,
  options = {},
  booking = null
) {
  const { chatId, nickName } = client;

  // 1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: Telegram chatId
  if (chatId && !isNaN(chatId)) {
    try {
      await bot.sendMessage(chatId, message, options);
      return;
    } catch (err) {
      console.error(
        `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ chatId ${chatId}:`,
        err
      );
    }
  }

  // 2Ô∏è‚É£ Email fallback
  if (nickName?.includes("@") && !nickName.startsWith("@")) {
    console.log(`üìß –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –Ω–∞ –∞–¥—Ä–µ—Å—É: ${nickName}`);
    await sendEmail(nickName, "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", messageHTML, true);
    if (booking) await scheduleEmailReminder(client, booking);
    return;
  }

  // 3Ô∏è‚É£ Telegram username fallback
  if (nickName?.startsWith("@")) {
    const clientChatIds = (await getClientChatIds(client.id, nickName)) || [];

    if (!clientChatIds.length) {
      console.error(
        `‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ chatId –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${nickName}`
      );
      return;
    }

    for (const id of clientChatIds) {
      if (isNaN(id)) {
        console.error(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π chatId: ${id}, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ.`);
        continue;
      }
      try {
        await bot.sendMessage(id, message, options);
      } catch (err) {
        console.error(
          `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è chatId ${id}:`,
          err
        );
      }
    }
    return;
  }

  // 4Ô∏è‚É£ –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç
  console.error(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç nickName: ${nickName}`);
}

module.exports = { sendClientNotification };
