const bot = require("./telegramBot");
const { prisma } = require("../../prisma/prisma-client");
const ReminderManager = require("../ReminderScheduler");

const reminderManager = new ReminderManager();

async function handleSetReminder(chatId, bookingId) {
  try {
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { client: true, services: true },
    });

    if (!booking) {
      return await bot.sendMessage(chatId, "‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    await bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "6 –≥–æ–¥–∏–Ω", callback_data: `reminder_6_${bookingId}` },
            { text: "12 –≥–æ–¥–∏–Ω", callback_data: `reminder_12_${bookingId}` },
          ],
          [
            { text: "24 –≥–æ–¥–∏–Ω–∏", callback_data: `reminder_24_${bookingId}` },
            { text: "–í–∏–º–∫–Ω—É—Ç–∏", callback_data: `reminder_off_${bookingId}` },
          ],
        ],
      },
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", error);
    await bot.sendMessage(
      chatId,
      "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
    );
  }
}

async function handleReminderChoice(
  chatId,
  callbackQuery,
  subAction,
  bookingId
) {
  try {
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { client: true, services: true, user: true, branch: true }, // –î–æ–¥–∞—î–º–æ include –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    });

    if (!booking) {
      console.error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", bookingId);
      return await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
      });
    }

    if (!reminderManager) {
      console.error("ReminderManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π");
      return await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å",
      });
    }

    if (subAction === "off") {
      await reminderManager.cancelReminder(bookingId);
      try {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await bot.deleteMessage(chatId, callbackQuery.message.message_id - 1);
      } catch (deleteError) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", deleteError);
      }
      const confirmationMessage = `üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:
üè¢ –°–∞–ª–æ–Ω: ${booking.branch?.name || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üë§ –ú–∞–π—Å—Ç–µ—Ä: ${booking.user?.name || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üõ†Ô∏è –ü–æ—Å–ª—É–≥–∞: ${booking.services?.map((s) => s.name).join(", ") || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üìÖ –î–∞—Ç–∞: ${booking.date.toISOString().split("T")[0]}
üïí –ß–∞—Å: ${booking.notes || "–Ω–µ–º–∞—î"}
‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${booking.time} —Ö–≤–∏–ª–∏–Ω`;

      await bot.sendMessage(chatId, confirmationMessage);
      return await bot.answerCallbackQuery(callbackQuery.id, {
        text: "üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
      });
    }

    const hours = parseInt(subAction);
    if (isNaN(hours)) {
      console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–¥–∏–Ω:", subAction);
      return await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å",
      });
    }

    try {
      await reminderManager.setupSingleReminder(booking, hours, booking.client);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", error);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–ª—ñ—î–Ω—Ç—É
      const errorMessage = `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:
${error.message}`;

      await bot.sendMessage(chatId, errorMessage);
      return await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è`,
      });
    }

    try {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      await bot.deleteMessage(chatId, callbackQuery.message.message_id - 1);
    } catch (deleteError) {
      console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", deleteError);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
    const confirmationMessage = `‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
üè¢ –°–∞–ª–æ–Ω: ${booking.branch?.name || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üë§ –ú–∞–π—Å—Ç–µ—Ä: ${booking.user?.name || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üõ†Ô∏è –ü–æ—Å–ª—É–≥–∞: ${booking.services?.map((s) => s.name).join(", ") || "–ù–µ–≤—ñ–¥–æ–º–æ"}
üìÖ –î–∞—Ç–∞: ${booking.date.toISOString().split("T")[0]}
üïí –ß–∞—Å: ${booking.notes || "–Ω–µ–º–∞—î"}
‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${booking.time} —Ö–≤–∏–ª–∏–Ω
‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${hours} –≥–æ–¥–∏–Ω –¥–æ –∑–∞–ø–∏—Å—É`;

    await bot.sendMessage(chatId, confirmationMessage);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", error);
    try {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    } catch (e) {
      console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ Telegram:", e);
    }
  }
}

module.exports = { handleSetReminder, handleReminderChoice };
