// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  name       String
  image      String?
  services   Service[]
  bookings   Booking[]
  reviews    Review[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
}

model Category {
  id        String    @id @default(uuid())
  name      String
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  duration    Int
  price       Float
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  bookings    Booking[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Client {
  id          String    @id @default(cuid())
  name        String
  nickName    String
  phoneNumber String    @unique
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Booking {
  id        String   @id @default(uuid())
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  time      String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String    @id @default(uuid())
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  rating    Int
  comment   String
  client    Client    @relation(fields: [clientId], references: [id])
  clientId  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
